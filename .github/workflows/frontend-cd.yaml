name: Frontend Continuous Deployment

# Ensure the workflow runs on schedule (Sunday at 0:00) and on push to the main branch
on:
  workflow_dispatch:
  push:
    branches:
      - main

#Use a matrix strategy to use Node.js versions 16.x and 18.x
jobs:
  linting:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-
      - run: |
         cd starter/frontend
         npm ci    
         npm run lint

  testing:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-
      - run: |
          cd starter/frontend
          npm ci
          npm run test

  build:
    needs: [linting, testing]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: latest
          cache: 'npm'
          cache-dependency-path: starter/frontend/package-lock.json
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - env:
          REPO_NAME: frontend  
        run: |
          cd starter/frontend
          docker build --build-arg REACT_APP_MOVIE_API_URL="http://k8s-default-backend-fff60ece15-e848fcd9967e3aa0.elb.us-east-1.amazonaws.com" -t 217464997509.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:${GITHUB_SHA::6} .
          docker push 217464997509.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:${GITHUB_SHA::6}

      - env:
          REPO_NAME: frontend
        run: |
          cd starter/frontend/k8s
          aws eks --region us-east-1 update-kubeconfig --name cluster
          kustomize edit set image frontend=217464997509.dkr.ecr.us-east-1.amazonaws.com/$REPO_NAME:${GITHUB_SHA::6}
          kustomize build . | kubectl apply -f - --validate=false